#include <stdio.h>
#include <stdlib.h>
#include <termios.h>
#include <unistd.h>
#include <pthread.h>
#include <string.h>
#include <signal.h>

#define SCREENWIDTH  128
#define SCREENHEIGHT 48
#define BGS          ' '

typedef struct {
    int x, y;
} sVector;


int terminateFlag = 0;

void moveCursor(int x, int y);
void moveCursorBy(int x, int y);

pthread_t initScreen();

void displayScreen();
void fillScreen(char bSign);
int swapScreen();

void closeScreen();

void handleInterrupt(int signal);
void *drawThread();

/////////////////////////////////////////
int drawPoint(sVector pos, char symbol);
/////////////////////////////////////////

char BUFFER[SCREENHEIGHT][SCREENWIDTH];


struct termios old, new;

int main()
{

    tcgetattr(STDIN_FILENO, &old);
    new = old;
    new.c_lflag &= ~(ICANON | ECHO);
    tcsetattr(STDIN_FILENO, TCSANOW, &new);

    struct sigaction sa;
    sa.sa_handler = handleInterrupt;
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = 0;

    sigaction(SIGINT, &sa, NULL);
    sigaction(SIGTSTP, &sa, NULL);

    ///////////////////////////////////////

    int tid = initScreen();

    sVector point={5, 5};

    while(1)
    {
        // ch = getchar();
        // if(ch == 'q')
        //     break;
        
        fillScreen('+');
        drawPoint(point, '@');
        displayScreen();
    }

    // pthread_join(&tid, NULL);

    ///////////////////////////////////////
    closeScreen();
    return 0;
}

void moveCursor(int x, int y)
{
    fprintf(stdout, "\033[%d;%dH", y, x);
}

void moveCursorBy(int x, int y)
{
    x > 0 ? fprintf(stdout, "\033[%dC", x) : fprintf(stdout, "\033[%dD", -x);
    y > 0 ? fprintf(stdout, "\033[%dB", y) : fprintf(stdout, "\033[%dA", -y);

}

pthread_t initScreen()
{
    pthread_t tid;

    moveCursor(0, 0);
    for(int y = 0; y < SCREENHEIGHT; y++)
    {
        memset(BUFFER[y], BGS, SCREENWIDTH);
    }

    pthread_create(&tid, NULL, displayScreen, NULL);
    return tid;
}

void displayScreen()
{
    char nl = '\n';
    moveCursor(0, 0);
    for(int y = 0; y < SCREENHEIGHT; y++)
    {
        fwrite(BUFFER[y], sizeof(BUFFER[y][0]), SCREENWIDTH, stdout);
        //fwrite(&nl, sizeof(nl), 1, stdout);
        fputc('\n', stdout);
    }
    moveCursor(0, 0);
    return NULL;
}

void fillScreen(char bSign)
{
    moveCursor(0, 0);
    for(int y = 0; y < SCREENHEIGHT; y++)
    {
        memset(BUFFER[y], bSign, SCREENWIDTH);
    }
}

void *drawThread()
{
    while(1)
    {
        if(terminateFlag)
            break;
        
        displayScreen(NULL);
    }
    return NULL;
}

void closeScreen()
{
    terminateFlag = 1;
    tcsetattr(STDIN_FILENO, TCSANOW, &old); // restore old settings, otherwise you need to restart terminal
}

void handleInterrupt(int signal)
{
    closeScreen();
    exit(EXIT_SUCCESS);
}

int drawPoint(sVector pos, char symbol)
{
    if(pos.x < 0 || pos.x > SCREENWIDTH-1)
        return 1;
    if(pos.y < 0 || pos.y > SCREENHEIGHT-1)
        return -1;

    BUFFER[pos.x][pos.y] = symbol;
    return 0;
}